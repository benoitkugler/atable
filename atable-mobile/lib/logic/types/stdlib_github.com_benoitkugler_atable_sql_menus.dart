// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'predefined.dart';
import 'stdlib_github.com_benoitkugler_atable_sql_users.dart';

// github.com/benoitkugler/atable/sql/menus.IdIngredient
typedef IdIngredient = int;

// github.com/benoitkugler/atable/sql/menus.IdMenu
typedef IdMenu = int;

// github.com/benoitkugler/atable/sql/menus.IdReceipe
typedef IdReceipe = int;

// github.com/benoitkugler/atable/sql/menus.Ingredient
class Ingredient {
  final IdIngredient id;
  final String name;
  final IngredientKind kind;

  const Ingredient(this.id, this.name, this.kind);

  @override
  String toString() {
    return "Ingredient($id, $name, $kind)";
  }
}

Ingredient ingredientFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Ingredient(intFromJson(json['Id']), stringFromJson(json['Name']),
      ingredientKindFromJson(json['Kind']));
}

Map<String, dynamic> ingredientToJson(Ingredient item) {
  return {
    "Id": intToJson(item.id),
    "Name": stringToJson(item.name),
    "Kind": ingredientKindToJson(item.kind)
  };
}

// github.com/benoitkugler/atable/sql/menus.IngredientKind
enum IngredientKind {
  empty,
  legumes,
  feculents,
  viandes,
  epicerie,
  laitages,
  boulangerie
}

extension _IngredientKindExt on IngredientKind {
  static IngredientKind fromValue(int i) {
    return IngredientKind.values[i];
  }

  int toValue() {
    return index;
  }
}

IngredientKind ingredientKindFromJson(dynamic json) =>
    _IngredientKindExt.fromValue(json as int);

dynamic ingredientKindToJson(IngredientKind item) => item.toValue();

// github.com/benoitkugler/atable/sql/menus.Menu
class Menu {
  final IdMenu id;
  final IdUser owner;
  final bool isFavorite;
  final bool isPublished;

  const Menu(this.id, this.owner, this.isFavorite, this.isPublished);

  @override
  String toString() {
    return "Menu($id, $owner, $isFavorite, $isPublished)";
  }
}

Menu menuFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Menu(intFromJson(json['Id']), intFromJson(json['Owner']),
      boolFromJson(json['IsFavorite']), boolFromJson(json['IsPublished']));
}

Map<String, dynamic> menuToJson(Menu item) {
  return {
    "Id": intToJson(item.id),
    "Owner": intToJson(item.owner),
    "IsFavorite": boolToJson(item.isFavorite),
    "IsPublished": boolToJson(item.isPublished)
  };
}

// github.com/benoitkugler/atable/sql/menus.MenuIngredient
class MenuIngredient {
  final IdMenu idMenu;
  final IdIngredient idIngredient;
  final QuantityR quantity;
  final PlatKind plat;

  const MenuIngredient(
      this.idMenu, this.idIngredient, this.quantity, this.plat);

  @override
  String toString() {
    return "MenuIngredient($idMenu, $idIngredient, $quantity, $plat)";
  }
}

MenuIngredient menuIngredientFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return MenuIngredient(
      intFromJson(json['IdMenu']),
      intFromJson(json['IdIngredient']),
      quantityRFromJson(json['Quantity']),
      platKindFromJson(json['Plat']));
}

Map<String, dynamic> menuIngredientToJson(MenuIngredient item) {
  return {
    "IdMenu": intToJson(item.idMenu),
    "IdIngredient": intToJson(item.idIngredient),
    "Quantity": quantityRToJson(item.quantity),
    "Plat": platKindToJson(item.plat)
  };
}

// github.com/benoitkugler/atable/sql/menus.MenuIngredients
typedef MenuIngredients = List<MenuIngredient>;

MenuIngredients menuIngredientsFromJson(dynamic json) {
  return listMenuIngredientFromJson(json);
}

dynamic menuIngredientsToJson(MenuIngredients item) {
  return listMenuIngredientToJson(item);
}

// github.com/benoitkugler/atable/sql/menus.MenuReceipe
class MenuReceipe {
  final IdMenu idMenu;
  final IdReceipe idReceipe;

  const MenuReceipe(this.idMenu, this.idReceipe);

  @override
  String toString() {
    return "MenuReceipe($idMenu, $idReceipe)";
  }
}

MenuReceipe menuReceipeFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return MenuReceipe(
      intFromJson(json['IdMenu']), intFromJson(json['IdReceipe']));
}

Map<String, dynamic> menuReceipeToJson(MenuReceipe item) {
  return {
    "IdMenu": intToJson(item.idMenu),
    "IdReceipe": intToJson(item.idReceipe)
  };
}

// github.com/benoitkugler/atable/sql/menus.MenuReceipes
typedef MenuReceipes = List<MenuReceipe>;

MenuReceipes menuReceipesFromJson(dynamic json) {
  return listMenuReceipeFromJson(json);
}

dynamic menuReceipesToJson(MenuReceipes item) {
  return listMenuReceipeToJson(item);
}

// github.com/benoitkugler/atable/sql/menus.PlatKind
enum PlatKind { empty, dessert, platPrincipal, entree }

extension _PlatKindExt on PlatKind {
  static PlatKind fromValue(int i) {
    return PlatKind.values[i];
  }

  int toValue() {
    return index;
  }
}

PlatKind platKindFromJson(dynamic json) => _PlatKindExt.fromValue(json as int);

dynamic platKindToJson(PlatKind item) => item.toValue();

// github.com/benoitkugler/atable/sql/menus.QuantityR
class QuantityR {
  final double val;
  final Unite unite;
  final int for_;

  const QuantityR(this.val, this.unite, this.for_);

  @override
  String toString() {
    return "QuantityR($val, $unite, $for_)";
  }
}

QuantityR quantityRFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return QuantityR(doubleFromJson(json['Val']), uniteFromJson(json['Unite']),
      intFromJson(json['For_']));
}

Map<String, dynamic> quantityRToJson(QuantityR item) {
  return {
    "Val": doubleToJson(item.val),
    "Unite": uniteToJson(item.unite),
    "For_": intToJson(item.for_)
  };
}

// github.com/benoitkugler/atable/sql/menus.Receipe
class Receipe {
  final IdReceipe id;
  final IdUser owner;
  final PlatKind plat;
  final String name;
  final String description;
  final bool isPublished;

  const Receipe(this.id, this.owner, this.plat, this.name, this.description,
      this.isPublished);

  @override
  String toString() {
    return "Receipe($id, $owner, $plat, $name, $description, $isPublished)";
  }
}

Receipe receipeFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Receipe(
      intFromJson(json['Id']),
      intFromJson(json['Owner']),
      platKindFromJson(json['Plat']),
      stringFromJson(json['Name']),
      stringFromJson(json['Description']),
      boolFromJson(json['IsPublished']));
}

Map<String, dynamic> receipeToJson(Receipe item) {
  return {
    "Id": intToJson(item.id),
    "Owner": intToJson(item.owner),
    "Plat": platKindToJson(item.plat),
    "Name": stringToJson(item.name),
    "Description": stringToJson(item.description),
    "IsPublished": boolToJson(item.isPublished)
  };
}

// github.com/benoitkugler/atable/sql/menus.ReceipeIngredient
class ReceipeIngredient {
  final IdReceipe idReceipe;
  final IdIngredient idIngredient;
  final QuantityR quantity;

  const ReceipeIngredient(this.idReceipe, this.idIngredient, this.quantity);

  @override
  String toString() {
    return "ReceipeIngredient($idReceipe, $idIngredient, $quantity)";
  }
}

ReceipeIngredient receipeIngredientFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return ReceipeIngredient(intFromJson(json['IdReceipe']),
      intFromJson(json['IdIngredient']), quantityRFromJson(json['Quantity']));
}

Map<String, dynamic> receipeIngredientToJson(ReceipeIngredient item) {
  return {
    "IdReceipe": intToJson(item.idReceipe),
    "IdIngredient": intToJson(item.idIngredient),
    "Quantity": quantityRToJson(item.quantity)
  };
}

// github.com/benoitkugler/atable/sql/menus.ReceipeIngredients
typedef ReceipeIngredients = List<ReceipeIngredient>;

ReceipeIngredients receipeIngredientsFromJson(dynamic json) {
  return listReceipeIngredientFromJson(json);
}

dynamic receipeIngredientsToJson(ReceipeIngredients item) {
  return listReceipeIngredientToJson(item);
}

// github.com/benoitkugler/atable/sql/menus.Unite
enum Unite { piece, kg, g, l, cL }

extension _UniteExt on Unite {
  static Unite fromValue(int i) {
    return Unite.values[i];
  }

  int toValue() {
    return index;
  }
}

Unite uniteFromJson(dynamic json) => _UniteExt.fromValue(json as int);

dynamic uniteToJson(Unite item) => item.toValue();

List<MenuIngredient> listMenuIngredientFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(menuIngredientFromJson).toList();
}

List<dynamic> listMenuIngredientToJson(List<MenuIngredient> item) {
  return item.map(menuIngredientToJson).toList();
}

List<MenuReceipe> listMenuReceipeFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(menuReceipeFromJson).toList();
}

List<dynamic> listMenuReceipeToJson(List<MenuReceipe> item) {
  return item.map(menuReceipeToJson).toList();
}

List<ReceipeIngredient> listReceipeIngredientFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(receipeIngredientFromJson).toList();
}

List<dynamic> listReceipeIngredientToJson(List<ReceipeIngredient> item) {
  return item.map(receipeIngredientToJson).toList();
}
