package users

// Code generated by gomacro/generator/go/sqlcrud. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

type scanner interface {
	Scan(...interface{}) error
}

// DB groups transaction like objects, and
// is implemented by *sql.DB and *sql.Tx
type DB interface {
	Exec(query string, args ...interface{}) (sql.Result, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
	Prepare(query string) (*sql.Stmt, error)
}

func scanOneUser(row scanner) (User, error) {
	var item User
	err := row.Scan(
		&item.Id,
		&item.IsAdmin,
		&item.Mail,
		&item.Password,
		&item.Pseudo,
	)
	return item, err
}

func ScanUser(row *sql.Row) (User, error) { return scanOneUser(row) }

// SelectAll returns all the items in the users table.
func SelectAllUsers(db DB) (Users, error) {
	rows, err := db.Query("SELECT * FROM users")
	if err != nil {
		return nil, err
	}
	return ScanUsers(rows)
}

// SelectUser returns the entry matching 'id'.
func SelectUser(tx DB, id IdUser) (User, error) {
	row := tx.QueryRow("SELECT * FROM users WHERE id = $1", id)
	return ScanUser(row)
}

// SelectUsers returns the entry matching the given 'ids'.
func SelectUsers(tx DB, ids ...IdUser) (Users, error) {
	rows, err := tx.Query("SELECT * FROM users WHERE id = ANY($1)", IdUserArrayToPQ(ids))
	if err != nil {
		return nil, err
	}
	return ScanUsers(rows)
}

type Users map[IdUser]User

func (m Users) IDs() []IdUser {
	out := make([]IdUser, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanUsers(rs *sql.Rows) (Users, error) {
	var (
		s   User
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(Users, 16)
	for rs.Next() {
		s, err = scanOneUser(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert one User in the database and returns the item with id filled.
func (item User) Insert(tx DB) (out User, err error) {
	row := tx.QueryRow(`INSERT INTO users (
		isadmin, mail, password, pseudo
		) VALUES (
		$1, $2, $3, $4
		) RETURNING *;
		`, item.IsAdmin, item.Mail, item.Password, item.Pseudo)
	return ScanUser(row)
}

// Update User in the database and returns the new version.
func (item User) Update(tx DB) (out User, err error) {
	row := tx.QueryRow(`UPDATE users SET (
		isadmin, mail, password, pseudo
		) = (
		$1, $2, $3, $4
		) WHERE id = $5 RETURNING *;
		`, item.IsAdmin, item.Mail, item.Password, item.Pseudo, item.Id)
	return ScanUser(row)
}

// Deletes the User and returns the item
func DeleteUserById(tx DB, id IdUser) (User, error) {
	row := tx.QueryRow("DELETE FROM users WHERE id = $1 RETURNING *;", id)
	return ScanUser(row)
}

// Deletes the User in the database and returns the ids.
func DeleteUsersByIDs(tx DB, ids ...IdUser) ([]IdUser, error) {
	rows, err := tx.Query("DELETE FROM users WHERE id = ANY($1) RETURNING id", IdUserArrayToPQ(ids))
	if err != nil {
		return nil, err
	}
	return ScanIdUserArray(rows)
}

// SelectUserByMail return zero or one item, thanks to a UNIQUE SQL constraint.
func SelectUserByMail(tx DB, mail string) (item User, found bool, err error) {
	row := tx.QueryRow("SELECT * FROM users WHERE Mail = $1", mail)
	item, err = ScanUser(row)
	if err == sql.ErrNoRows {
		return item, false, nil
	}
	return item, true, err
}

func IdUserArrayToPQ(ids []IdUser) pq.Int64Array {
	out := make(pq.Int64Array, len(ids))
	for i, v := range ids {
		out[i] = int64(v)
	}
	return out
}

// ScanIdUserArray scans the result of a query returning a
// list of ID's.
func ScanIdUserArray(rs *sql.Rows) ([]IdUser, error) {
	defer rs.Close()
	ints := make([]IdUser, 0, 16)
	var err error
	for rs.Next() {
		var s IdUser
		if err = rs.Scan(&s); err != nil {
			return nil, err
		}
		ints = append(ints, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return ints, nil
}

type IdUserSet map[IdUser]bool

func NewIdUserSetFrom(ids []IdUser) IdUserSet {
	out := make(IdUserSet, len(ids))
	for _, key := range ids {
		out[key] = true
	}
	return out
}

func (s IdUserSet) Add(id IdUser) { s[id] = true }

func (s IdUserSet) Has(id IdUser) bool { return s[id] }

func (s IdUserSet) Keys() []IdUser {
	out := make([]IdUser, 0, len(s))
	for k := range s {
		out = append(out, k)
	}
	return out
}
