// Code generated by gomacro/typescript/axios_api.go. DO NOT EDIT

import type { AxiosResponse } from "axios";
import Axios from "axios";

class DateTag {
  private _ = "D" as const;
}

// AAAA-MM-YY date format
export type Date_ = string & DateTag;

// github.com/benoitkugler/atable/controllers/sejours.SejourExt
export interface SejourExt {
  Sejour: Sejour;
  Groups: Group[] | null;
}
// github.com/benoitkugler/atable/controllers/users.AskInscriptionIn
export interface AskInscriptionIn {
  Mail: string;
  Password: string;
  Pseudo: string;
}
// github.com/benoitkugler/atable/controllers/users.AskInscriptionOut
export interface AskInscriptionOut {
  Error: string;
  IsPasswordError: boolean;
}
// github.com/benoitkugler/atable/controllers/users.LogginIn
export interface LogginIn {
  Mail: string;
  Password: string;
}
// github.com/benoitkugler/atable/controllers/users.LogginOut
export interface LogginOut {
  Error: string;
  Token: string;
  Pseudo: string;
  IsPasswordError: boolean;
}
// github.com/benoitkugler/atable/sql/sejours.Date
export type Date = Date_;
// github.com/benoitkugler/atable/sql/sejours.Group
export interface Group {
  Id: IdGroup;
  Sejour: IdSejour;
  Name: string;
  Color: string;
  Size: number;
}
// github.com/benoitkugler/atable/sql/sejours.IdGroup
export type IdGroup = number;
// github.com/benoitkugler/atable/sql/sejours.IdSejour
export type IdSejour = number;
// github.com/benoitkugler/atable/sql/sejours.Sejour
export interface Sejour {
  Id: IdSejour;
  Owner: IdUser;
  Start: Date;
  Name: string;
}
// github.com/benoitkugler/atable/sql/users.IdUser
export type IdUser = number;

/** AbstractAPI provides auto-generated API calls and should be used 
		as base class for an app controller.
	*/
export abstract class AbstractAPI {
  constructor(
    protected baseUrl: string,
    protected authToken: string,
  ) {}

  abstract handleError(error: any): void;

  abstract startRequest(): void;

  getHeaders() {
    return { Authorization: "Bearer " + this.authToken };
  }

  protected async rawAskInscription(params: AskInscriptionIn) {
    const fullUrl = this.baseUrl + "/api/inscription";
    const rep: AxiosResponse<AskInscriptionOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** AskInscription wraps rawAskInscription and handles the error */
  async AskInscription(params: AskInscriptionIn) {
    this.startRequest();
    try {
      const out = await this.rawAskInscription(params);
      this.onSuccessAskInscription(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessAskInscription(data: AskInscriptionOut): void {}

  protected async rawValidateInscription(params: { data: string }) {
    const fullUrl = this.baseUrl + "inscription";
    await Axios.get(fullUrl, {
      params: { data: params["data"] },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** ValidateInscription wraps rawValidateInscription and handles the error */
  async ValidateInscription(params: { data: string }) {
    this.startRequest();
    try {
      const out = await this.rawValidateInscription(params);
      this.onSuccessValidateInscription();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessValidateInscription(): void {}

  protected async rawLoggin(params: LogginIn) {
    const fullUrl = this.baseUrl + "/api/loggin";
    const rep: AxiosResponse<LogginOut> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** Loggin wraps rawLoggin and handles the error */
  async Loggin(params: LogginIn) {
    this.startRequest();
    try {
      const out = await this.rawLoggin(params);
      this.onSuccessLoggin(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessLoggin(data: LogginOut): void {}

  protected async rawUserResetPassword(params: { mail: string }) {
    const fullUrl = this.baseUrl + "/api/reset";
    await Axios.get(fullUrl, {
      params: { mail: params["mail"] },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** UserResetPassword wraps rawUserResetPassword and handles the error */
  async UserResetPassword(params: { mail: string }) {
    this.startRequest();
    try {
      const out = await this.rawUserResetPassword(params);
      this.onSuccessUserResetPassword();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessUserResetPassword(): void {}

  protected async rawSejoursGet() {
    const fullUrl = this.baseUrl + "/api/sejours";
    const rep: AxiosResponse<SejourExt[] | null> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** SejoursGet wraps rawSejoursGet and handles the error */
  async SejoursGet() {
    this.startRequest();
    try {
      const out = await this.rawSejoursGet();
      this.onSuccessSejoursGet(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursGet(data: SejourExt[] | null): void {}

  protected async rawSejoursCreate() {
    const fullUrl = this.baseUrl + "/api/sejours";
    const rep: AxiosResponse<SejourExt> = await Axios.put(fullUrl, null, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** SejoursCreate wraps rawSejoursCreate and handles the error */
  async SejoursCreate() {
    this.startRequest();
    try {
      const out = await this.rawSejoursCreate();
      this.onSuccessSejoursCreate(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursCreate(data: SejourExt): void {}

  protected async rawSejoursUpdate(params: Sejour) {
    const fullUrl = this.baseUrl + "/api/sejours";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** SejoursUpdate wraps rawSejoursUpdate and handles the error */
  async SejoursUpdate(params: Sejour) {
    this.startRequest();
    try {
      const out = await this.rawSejoursUpdate(params);
      this.onSuccessSejoursUpdate();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursUpdate(): void {}

  protected async rawSejoursDelete(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/sejours";
    await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** SejoursDelete wraps rawSejoursDelete and handles the error */
  async SejoursDelete(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawSejoursDelete(params);
      this.onSuccessSejoursDelete();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursDelete(): void {}

  protected async rawSejoursCreateGroupe(params: { "id-sejour": number }) {
    const fullUrl = this.baseUrl + "/api/sejours/groups";
    const rep: AxiosResponse<Group> = await Axios.put(fullUrl, null, {
      params: { "id-sejour": String(params["id-sejour"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** SejoursCreateGroupe wraps rawSejoursCreateGroupe and handles the error */
  async SejoursCreateGroupe(params: { "id-sejour": number }) {
    this.startRequest();
    try {
      const out = await this.rawSejoursCreateGroupe(params);
      this.onSuccessSejoursCreateGroupe(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursCreateGroupe(data: Group): void {}

  protected async rawSejoursUpdateGroupe(params: Group) {
    const fullUrl = this.baseUrl + "/api/sejours/groups";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** SejoursUpdateGroupe wraps rawSejoursUpdateGroupe and handles the error */
  async SejoursUpdateGroupe(params: Group) {
    this.startRequest();
    try {
      const out = await this.rawSejoursUpdateGroupe(params);
      this.onSuccessSejoursUpdateGroupe();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursUpdateGroupe(): void {}

  protected async rawSejoursDeleteGroupe(params: { "id-group": number }) {
    const fullUrl = this.baseUrl + "/api/sejours/groups";
    await Axios.delete(fullUrl, {
      params: { "id-group": String(params["id-group"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** SejoursDeleteGroupe wraps rawSejoursDeleteGroupe and handles the error */
  async SejoursDeleteGroupe(params: { "id-group": number }) {
    this.startRequest();
    try {
      const out = await this.rawSejoursDeleteGroupe(params);
      this.onSuccessSejoursDeleteGroupe();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursDeleteGroupe(): void {}
}
