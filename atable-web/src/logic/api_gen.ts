// Code generated by gomacro/typescript/axios_api.go. DO NOT EDIT

import type { AxiosResponse } from "axios";
import Axios from "axios";

export type Ar2_MealGroups = [MealGroups, MealGroups];

// AAAA-MM-YY date format
export type Date_ = string & { __opaque__: "Date" };

export type Int = number & { __opaque__: "Int" };

// ISO date-time string
export type Time = string & { __opaque__: "Time" };

// github.com/benoitkugler/atable/controllers/library.AddMenuIngredientIn
export interface AddMenuIngredientIn {
  IdMenu: IdMenu;
  IdIngredient: IdIngredient;
}
// github.com/benoitkugler/atable/controllers/library.AddMenuReceipeIn
export interface AddMenuReceipeIn {
  IdMenu: IdMenu;
  IdReceipe: IdReceipe;
}
// github.com/benoitkugler/atable/controllers/library.AddReceipeIngredientIn
export interface AddReceipeIngredientIn {
  IdReceipe: IdReceipe;
  IdIngredient: IdIngredient;
  InitialFor: Int;
}
// github.com/benoitkugler/atable/controllers/library.DeleteIngredientOut
export interface DeleteIngredientOut {
  Deleted: boolean;
  UsesReceipes: IdReceipe[] | null;
  UsesMenus: IdMenu[] | null;
}
// github.com/benoitkugler/atable/controllers/library.ImportReceipes1Out
export interface ImportReceipes1Out {
  Receipes: ReceipeI[] | null;
  Map: Record<string, Ingredient> | null;
}
// github.com/benoitkugler/atable/controllers/library.IngredientHeader
export interface IngredientHeader {
  Title: string;
  ID: Int;
  IsPersonnal: boolean;
  Owner: string;
  Kind: IngredientKind;
}
// github.com/benoitkugler/atable/controllers/library.IngredientI
export interface IngredientI {
  Name: string;
  Quantity: number;
  Unite: Unite;
}
// github.com/benoitkugler/atable/controllers/library.IngredientQuantity
export interface IngredientQuantity {
  Ingredient: Ingredient;
  Quantities: Quantity[] | null;
}
// github.com/benoitkugler/atable/controllers/library.MenuExt
export interface MenuExt {
  Menu: Menu;
  Ingredients: MenuIngredientExt[] | null;
  Receipes: Receipe[] | null;
  OwnerPseudo: string;
}
// github.com/benoitkugler/atable/controllers/library.MenuIngredientExt
export interface MenuIngredientExt {
  IdMenu: IdMenu;
  IdIngredient: IdIngredient;
  Quantity: QuantityR;
  Plat: PlatKind;
  Ingredient: Ingredient;
}
// github.com/benoitkugler/atable/controllers/library.Quantity
export interface Quantity {
  Unite: Unite;
  Val: number;
}
// github.com/benoitkugler/atable/controllers/library.ReceipeExt
export interface ReceipeExt {
  Receipe: Receipe;
  Ingredients: ReceipeIngredientExt[] | null;
  OwnerPseudo: string;
}
// github.com/benoitkugler/atable/controllers/library.ReceipeHeader
export interface ReceipeHeader {
  Title: string;
  ID: Int;
  IsPersonnal: boolean;
  Owner: string;
  Plat: PlatKind;
}
// github.com/benoitkugler/atable/controllers/library.ReceipeI
export interface ReceipeI {
  Name: string;
  For: Int;
  Plat: PlatKind;
  Ingredients: IngredientI[] | null;
}
// github.com/benoitkugler/atable/controllers/library.ReceipeIngredientExt
export interface ReceipeIngredientExt {
  Id: IdIngredient;
  Name: string;
  Kind: IngredientKind;
  Owner: IdUser;
  Quantity: QuantityR;
}
// github.com/benoitkugler/atable/controllers/library.ResourceHeader
export interface ResourceHeader {
  Title: string;
  ID: Int;
  IsPersonnal: boolean;
  Owner: string;
}
// github.com/benoitkugler/atable/controllers/order.CompileIngredientsIn
export interface CompileIngredientsIn {
  IdSejour: IdSejour;
  DayOffsets: Int[] | null;
}
// github.com/benoitkugler/atable/controllers/order.CompileIngredientsOut
export interface CompileIngredientsOut {
  Meals: Meals;
  Ingredients: IngredientQuantities[] | null;
}
// github.com/benoitkugler/atable/controllers/order.DefaultMappingIn
export interface DefaultMappingIn {
  Ingredients: IdIngredient[] | null;
  Profile: IdProfile;
}
// github.com/benoitkugler/atable/controllers/order.ExportExcelIn
export interface ExportExcelIn {
  IdSejour: IdSejour;
  Data: CompileIngredientsOut;
  Mapping: IngredientMapping;
}
// github.com/benoitkugler/atable/controllers/order.IngredientMapping
export type IngredientMapping = Record<IdIngredient, IdSupplier> | null;
// github.com/benoitkugler/atable/controllers/order.IngredientQuantities
export interface IngredientQuantities {
  Ingredient: Ingredient;
  Quantities: QuantityMeal[] | null;
}
// github.com/benoitkugler/atable/controllers/order.ProfileExt
export type ProfileExt = SupplierExt[] | null;
// github.com/benoitkugler/atable/controllers/order.ProfileHeader
export interface ProfileHeader {
  Profile: Profile;
  Suppliers: Suppliers;
}
// github.com/benoitkugler/atable/controllers/order.QuantityMeal
export interface QuantityMeal {
  Quantity: Quantity;
  Origin: IdMeal;
}
// github.com/benoitkugler/atable/controllers/order.SetDefaultProfile
export interface SetDefaultProfile {
  IdSejour: IdSejour;
  IdProfile: IdProfile;
}
// github.com/benoitkugler/atable/controllers/order.SupplierExt
export interface SupplierExt {
  Id: IdSupplier;
  Kinds: IngredientKind[] | null;
  Ingredients: IdIngredient[] | null;
}
// github.com/benoitkugler/atable/controllers/order.TidyIn
export interface TidyIn {
  Id: IdProfile;
}
// github.com/benoitkugler/atable/controllers/order.UpdateProfileMapIngIn
export interface UpdateProfileMapIngIn {
  IdProfile: IdProfile;
  Ingredients: IdIngredient[] | null;
  NewSupplier: IdSupplier;
}
// github.com/benoitkugler/atable/controllers/order.UpdateProfileMapKindIn
export interface UpdateProfileMapKindIn {
  IdProfile: IdProfile;
  Supplier: IdSupplier;
  Kinds: IngredientKind[] | null;
}
// github.com/benoitkugler/atable/controllers/sejours.AddIngredientIn
export interface AddIngredientIn {
  IdSejour: IdSejour;
  IdMenu: IdMenu;
  IdIngredient: IdIngredient;
}
// github.com/benoitkugler/atable/controllers/sejours.AddReceipeIn
export interface AddReceipeIn {
  IdMenu: IdMenu;
  IdReceipe: IdReceipe;
}
// github.com/benoitkugler/atable/controllers/sejours.AssistantMealsIn
export interface AssistantMealsIn {
  IdSejour: IdSejour;
  DaysNumber: Int;
  Excursions: Record<Int, IdGroup[] | null> | null;
  WithGouter: boolean;
  GroupsForCinquieme: IdGroup[] | null;
  DeleteExisting: boolean;
}
// github.com/benoitkugler/atable/controllers/sejours.ExportCookbookIn
export interface ExportCookbookIn {
  IdSejour: IdSejour;
  Days: Int[] | null;
}
// github.com/benoitkugler/atable/controllers/sejours.MealCreateIn
export interface MealCreateIn {
  IdSejour: IdSejour;
  Day: Int;
  Horaire: Horaire;
}
// github.com/benoitkugler/atable/controllers/sejours.MealExt
export interface MealExt {
  Meal: Meal;
  Groups: MealGroups;
}
// github.com/benoitkugler/atable/controllers/sejours.MealsLoadOut
export interface MealsLoadOut {
  Menus: Record<IdMenu, MenuExt> | null;
  Meals: MealExt[] | null;
}
// github.com/benoitkugler/atable/controllers/sejours.MoveGroupIn
export interface MoveGroupIn {
  Group: IdGroup;
  From: IdMeal;
  To: IdMeal;
}
// github.com/benoitkugler/atable/controllers/sejours.PreviewQuantitiesOut
export interface PreviewQuantitiesOut {
  NbPeople: Int;
  Quantities: IngredientQuantity[] | null;
}
// github.com/benoitkugler/atable/controllers/sejours.RemoveItemIn
export interface RemoveItemIn {
  IdMenu: IdMenu;
  ID: Int;
  IsReceipe: boolean;
}
// github.com/benoitkugler/atable/controllers/sejours.ResourceSearchOut
export interface ResourceSearchOut {
  Menus: ResourceHeader[] | null;
  Receipes: ReceipeHeader[] | null;
  Ingredients: IngredientHeader[] | null;
}
// github.com/benoitkugler/atable/controllers/sejours.SejourExt
export interface SejourExt {
  Sejour: Sejour;
  Groups: Group[] | null;
  ExportClientURL: string;
  Label: string;
}
// github.com/benoitkugler/atable/controllers/sejours.SetMenuIn
export interface SetMenuIn {
  IdMeal: IdMeal;
  IdMenu: IdMenu;
}
// github.com/benoitkugler/atable/controllers/sejours.SwapMenusIn
export interface SwapMenusIn {
  IdMeal1: IdMeal;
  IdMeal2: IdMeal;
}
// github.com/benoitkugler/atable/controllers/users.AskInscriptionIn
export interface AskInscriptionIn {
  Mail: string;
  Password: string;
  Pseudo: string;
}
// github.com/benoitkugler/atable/controllers/users.AskInscriptionOut
export interface AskInscriptionOut {
  Error: string;
  IsPasswordError: boolean;
}
// github.com/benoitkugler/atable/controllers/users.LogginIn
export interface LogginIn {
  Mail: string;
  Password: string;
}
// github.com/benoitkugler/atable/controllers/users.LogginOut
export interface LogginOut {
  Error: string;
  IsPasswordError: boolean;
  Id: IdUser;
  Token: string;
  Pseudo: string;
}
export type IdIngredient = Int & { __opaque_int__: "IdIngredient" };
export type IdMenu = Int & { __opaque_int__: "IdMenu" };
export type IdReceipe = Int & { __opaque_int__: "IdReceipe" };
// github.com/benoitkugler/atable/sql/menus.Ingredient
export interface Ingredient {
  Id: IdIngredient;
  Name: string;
  Kind: IngredientKind;
  Owner: IdUser;
}
// github.com/benoitkugler/atable/sql/menus.IngredientKind
export const IngredientKind = {
  I_Empty: 0,
  I_Legumes: 1,
  I_Feculents: 2,
  I_Viandes: 3,
  I_Epicerie: 4,
  I_Laitages: 5,
  I_Boulangerie: 6,
} as const;
export type IngredientKind =
  (typeof IngredientKind)[keyof typeof IngredientKind];

export const IngredientKindLabels: Record<IngredientKind, string> = {
  [IngredientKind.I_Empty]: "Autre",
  [IngredientKind.I_Legumes]: "Fruits et légumes",
  [IngredientKind.I_Feculents]: "Féculents",
  [IngredientKind.I_Viandes]: "Viandes, poissons",
  [IngredientKind.I_Epicerie]: "Épicerie",
  [IngredientKind.I_Laitages]: "Laitages",
  [IngredientKind.I_Boulangerie]: "Boulangerie",
};

// github.com/benoitkugler/atable/sql/menus.Ingredients
export type Ingredients = Record<IdIngredient, Ingredient> | null;
// github.com/benoitkugler/atable/sql/menus.Menu
export interface Menu {
  Id: IdMenu;
  Owner: IdUser;
  IsFavorite: boolean;
  IsPublished: boolean;
  Updated: Time;
}
// github.com/benoitkugler/atable/sql/menus.MenuIngredient
export interface MenuIngredient {
  IdMenu: IdMenu;
  IdIngredient: IdIngredient;
  Quantity: QuantityR;
  Plat: PlatKind;
}
// github.com/benoitkugler/atable/sql/menus.PlatKind
export const PlatKind = {
  P_Empty: 0,
  P_Dessert: 1,
  P_PlatPrincipal: 2,
  P_Entree: 3,
} as const;
export type PlatKind = (typeof PlatKind)[keyof typeof PlatKind];

export const PlatKindLabels: Record<PlatKind, string> = {
  [PlatKind.P_Empty]: "Autre",
  [PlatKind.P_Dessert]: "Dessert",
  [PlatKind.P_PlatPrincipal]: "Plat principal",
  [PlatKind.P_Entree]: "Entrée",
};

// github.com/benoitkugler/atable/sql/menus.QuantityR
export interface QuantityR {
  Val: number;
  Unite: Unite;
  For_: Int;
}
// github.com/benoitkugler/atable/sql/menus.Receipe
export interface Receipe {
  Id: IdReceipe;
  Owner: IdUser;
  Plat: PlatKind;
  Name: string;
  Description: string;
  IsPublished: boolean;
  Updated: Time;
}
// github.com/benoitkugler/atable/sql/menus.ReceipeIngredient
export interface ReceipeIngredient {
  IdReceipe: IdReceipe;
  IdIngredient: IdIngredient;
  Quantity: QuantityR;
}
// github.com/benoitkugler/atable/sql/menus.Receipes
export type Receipes = Record<IdReceipe, Receipe> | null;
// github.com/benoitkugler/atable/sql/menus.Unite
export const Unite = {
  U_Piece: 0,
  U_Kg: 1,
  U_G: 2,
  U_L: 3,
  U_CL: 4,
} as const;
export type Unite = (typeof Unite)[keyof typeof Unite];

export const UniteLabels: Record<Unite, string> = {
  [Unite.U_Piece]: "pièces",
  [Unite.U_Kg]: "kg",
  [Unite.U_G]: "gr",
  [Unite.U_L]: "L",
  [Unite.U_CL]: "cL",
};

export type IdProfile = Int & { __opaque_int__: "IdProfile" };
export type IdSupplier = Int & { __opaque_int__: "IdSupplier" };
// github.com/benoitkugler/atable/sql/orders.Profile
export interface Profile {
  Id: IdProfile;
  IdOwner: IdUser;
  Name: string;
}
// github.com/benoitkugler/atable/sql/orders.Supplier
export interface Supplier {
  Id: IdSupplier;
  IdProfile: IdProfile;
  Name: string;
}
// github.com/benoitkugler/atable/sql/orders.Suppliers
export type Suppliers = Record<IdSupplier, Supplier> | null;
// github.com/benoitkugler/atable/sql/sejours.Date
export type Date = Date_;
// github.com/benoitkugler/atable/sql/sejours.Group
export interface Group {
  Id: IdGroup;
  Sejour: IdSejour;
  Name: string;
  Color: string;
  Size: Int;
}
// github.com/benoitkugler/atable/sql/sejours.Horaire
export const Horaire = {
  PetitDejeuner: 0,
  Midi: 1,
  Gouter: 2,
  Diner: 3,
  Cinquieme: 4,
} as const;
export type Horaire = (typeof Horaire)[keyof typeof Horaire];

export const HoraireLabels: Record<Horaire, string> = {
  [Horaire.PetitDejeuner]: "Petit déjeuner",
  [Horaire.Midi]: "Midi",
  [Horaire.Gouter]: "Goûter",
  [Horaire.Diner]: "Dîner",
  [Horaire.Cinquieme]: "Cinquième",
};

export type IdGroup = Int & { __opaque_int__: "IdGroup" };
export type IdMeal = Int & { __opaque_int__: "IdMeal" };
export type IdSejour = Int & { __opaque_int__: "IdSejour" };
// github.com/benoitkugler/atable/sql/sejours.Meal
export interface Meal {
  Id: IdMeal;
  Sejour: IdSejour;
  Menu: IdMenu;
  Jour: Int;
  AdditionalPeople: Int;
  Horaire: Horaire;
}
// github.com/benoitkugler/atable/sql/sejours.MealGroup
export interface MealGroup {
  IdMeal: IdMeal;
  IdGroup: IdGroup;
}
// github.com/benoitkugler/atable/sql/sejours.MealGroups
export type MealGroups = MealGroup[] | null;
// github.com/benoitkugler/atable/sql/sejours.Meals
export type Meals = Record<IdMeal, Meal> | null;
// github.com/benoitkugler/atable/sql/sejours.OptionnalIdProfile
export interface OptionnalIdProfile {
  Valid: boolean;
  IdProfile: IdProfile;
}
// github.com/benoitkugler/atable/sql/sejours.Sejour
export interface Sejour {
  Id: IdSejour;
  Owner: IdUser;
  Start: Date;
  Name: string;
  IdProfile: OptionnalIdProfile;
}
export type IdUser = Int & { __opaque_int__: "IdUser" };
// github.com/benoitkugler/atable/sql/users.User
export interface User {
  Id: IdUser;
  IsAdmin: boolean;
  Mail: string;
  Password: string;
  Pseudo: string;
}

/** AbstractAPI provides auto-generated API calls and should be used 
		as base class for an app controller.
	*/
export abstract class AbstractAPI {
  constructor(
    protected baseURL: string,
    public authToken: string,
  ) {}

  protected abstract handleError(error: any): void;

  protected abstract startRequest(): void;

  getHeaders() {
    return { Authorization: "Bearer " + this.authToken };
  }

  /** AskInscription performs the request and handles the error */
  async AskInscription(params: AskInscriptionIn) {
    const fullUrl = this.baseURL + "/api/inscription";
    this.startRequest();
    try {
      const rep: AxiosResponse<AskInscriptionOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** Loggin performs the request and handles the error */
  async Loggin(params: LogginIn) {
    const fullUrl = this.baseURL + "/api/loggin";
    this.startRequest();
    try {
      const rep: AxiosResponse<LogginOut> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** UserResetPassword performs the request and handles the error */
  async UserResetPassword(params: { mail: string }) {
    const fullUrl = this.baseURL + "/api/reset";
    this.startRequest();
    try {
      await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { mail: params["mail"] },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** UserGetSettings performs the request and handles the error */
  async UserGetSettings() {
    const fullUrl = this.baseURL + "/api/settings";
    this.startRequest();
    try {
      const rep: AxiosResponse<User> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** UserUpdateSettings performs the request and handles the error */
  async UserUpdateSettings(params: User) {
    const fullUrl = this.baseURL + "/api/settings";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** SejoursGet performs the request and handles the error */
  async SejoursGet() {
    const fullUrl = this.baseURL + "/api/sejours";
    this.startRequest();
    try {
      const rep: AxiosResponse<SejourExt[] | null> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** SejoursCreate performs the request and handles the error */
  async SejoursCreate() {
    const fullUrl = this.baseURL + "/api/sejours";
    this.startRequest();
    try {
      const rep: AxiosResponse<SejourExt> = await Axios.put(fullUrl, null, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** SejoursUpdate performs the request and handles the error */
  async SejoursUpdate(params: Sejour) {
    const fullUrl = this.baseURL + "/api/sejours";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** SejoursDelete performs the request and handles the error */
  async SejoursDelete(params: { id: IdSejour }) {
    const fullUrl = this.baseURL + "/api/sejours";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** SejoursDuplicate performs the request and handles the error */
  async SejoursDuplicate(params: { idSejour: IdSejour }) {
    const fullUrl = this.baseURL + "/api/sejours/duplicate";
    this.startRequest();
    try {
      const rep: AxiosResponse<SejourExt> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { idSejour: String(params["idSejour"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** SejoursCreateGroupe performs the request and handles the error */
  async SejoursCreateGroupe(params: { idSejour: IdSejour }) {
    const fullUrl = this.baseURL + "/api/sejours/groups";
    this.startRequest();
    try {
      const rep: AxiosResponse<Group> = await Axios.put(fullUrl, null, {
        headers: this.getHeaders(),
        params: { idSejour: String(params["idSejour"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** SejoursUpdateGroupe performs the request and handles the error */
  async SejoursUpdateGroupe(params: Group) {
    const fullUrl = this.baseURL + "/api/sejours/groups";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** SejoursDeleteGroupe performs the request and handles the error */
  async SejoursDeleteGroupe(params: { idGroup: IdGroup }) {
    const fullUrl = this.baseURL + "/api/sejours/groups";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { idGroup: String(params["idGroup"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsLoadDay performs the request and handles the error */
  async MealsLoadDay(params: { idSejour: IdSejour; day: Int }) {
    const fullUrl = this.baseURL + "/api/meals";
    this.startRequest();
    try {
      const rep: AxiosResponse<MealsLoadOut> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: {
          idSejour: String(params["idSejour"]),
          day: String(params["day"]),
        },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsLoadAll performs the request and handles the error */
  async MealsLoadAll(params: { idSejour: IdSejour }) {
    const fullUrl = this.baseURL + "/api/meals-all";
    this.startRequest();
    try {
      const rep: AxiosResponse<MealsLoadOut> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { idSejour: String(params["idSejour"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsWizzard performs the request and handles the error */
  async MealsWizzard(params: AssistantMealsIn) {
    const fullUrl = this.baseURL + "/api/meals/wizzard";
    this.startRequest();
    try {
      const rep: AxiosResponse<MealsLoadOut> = await Axios.put(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsSearch performs the request and handles the error */
  async MealsSearch(params: { search: string }) {
    const fullUrl = this.baseURL + "/api/meals/search";
    this.startRequest();
    try {
      const rep: AxiosResponse<ResourceSearchOut> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { search: params["search"] },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsPreviewQuantities performs the request and handles the error */
  async MealsPreviewQuantities(params: { idMeal: IdMeal }) {
    const fullUrl = this.baseURL + "/api/meals/quantities";
    this.startRequest();
    try {
      const rep: AxiosResponse<PreviewQuantitiesOut> = await Axios.get(
        fullUrl,
        {
          headers: this.getHeaders(),
          params: { idMeal: String(params["idMeal"]) },
        },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsCreate performs the request and handles the error */
  async MealsCreate(params: MealCreateIn) {
    const fullUrl = this.baseURL + "/api/meals/details";
    this.startRequest();
    try {
      const rep: AxiosResponse<MealExt> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsUpdate performs the request and handles the error */
  async MealsUpdate(params: Meal) {
    const fullUrl = this.baseURL + "/api/meals/details";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsDelete performs the request and handles the error */
  async MealsDelete(params: { idMeal: IdMeal }) {
    const fullUrl = this.baseURL + "/api/meals/details";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { idMeal: String(params["idMeal"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsMoveGroup performs the request and handles the error */
  async MealsMoveGroup(params: MoveGroupIn) {
    const fullUrl = this.baseURL + "/api/meals/groups";
    this.startRequest();
    try {
      const rep: AxiosResponse<Ar2_MealGroups> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsAddIngredient performs the request and handles the error */
  async MealsAddIngredient(params: AddIngredientIn) {
    const fullUrl = this.baseURL + "/api/meals/ingredients";
    this.startRequest();
    try {
      const rep: AxiosResponse<MenuExt> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsUpdateMenuIngredient performs the request and handles the error */
  async MealsUpdateMenuIngredient(params: MenuIngredient) {
    const fullUrl = this.baseURL + "/api/meals/ingredients";
    this.startRequest();
    try {
      const rep: AxiosResponse<MenuExt> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsAddReceipe performs the request and handles the error */
  async MealsAddReceipe(params: AddReceipeIn) {
    const fullUrl = this.baseURL + "/api/meals/receipes";
    this.startRequest();
    try {
      const rep: AxiosResponse<MenuExt> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsRemoveItem performs the request and handles the error */
  async MealsRemoveItem(params: RemoveItemIn) {
    const fullUrl = this.baseURL + "/api/meals/remove";
    this.startRequest();
    try {
      const rep: AxiosResponse<MenuExt> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsSetMenu performs the request and handles the error */
  async MealsSetMenu(params: SetMenuIn) {
    const fullUrl = this.baseURL + "/api/meals/menus";
    this.startRequest();
    try {
      const rep: AxiosResponse<MenuExt> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsSwapMenus performs the request and handles the error */
  async MealsSwapMenus(params: SwapMenusIn) {
    const fullUrl = this.baseURL + "/api/meals/swap";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** MealsExportCookbook performs the request and handles the error */
  async MealsExportCookbook(params: ExportCookbookIn) {
    const fullUrl = this.baseURL + "/api/meals/cookbook";
    this.startRequest();
    try {
      const rep: AxiosResponse<Blob> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
        responseType: "arraybuffer",
      });

      const header = rep.headers["content-disposition"];
      const startIndex = header.indexOf("filename=") + 9;
      const endIndex = header.length;
      const filename = decodeURIComponent(
        header.substring(startIndex, endIndex),
      );
      return { blob: rep.data, filename: filename };
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryLoadIngredients performs the request and handles the error */
  async LibraryLoadIngredients() {
    const fullUrl = this.baseURL + "/api/library/all-ingredients";
    this.startRequest();
    try {
      const rep: AxiosResponse<Ingredients> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryCreateIngredient performs the request and handles the error */
  async LibraryCreateIngredient(params: Ingredient) {
    const fullUrl = this.baseURL + "/api/library/all-ingredients";
    this.startRequest();
    try {
      const rep: AxiosResponse<Ingredient> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryLoadReceipes performs the request and handles the error */
  async LibraryLoadReceipes() {
    const fullUrl = this.baseURL + "/api/library/all-receipes";
    this.startRequest();
    try {
      const rep: AxiosResponse<Receipes> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryUpdateIngredient performs the request and handles the error */
  async LibraryUpdateIngredient(params: Ingredient) {
    const fullUrl = this.baseURL + "/api/library/all-ingredients";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryDeleteIngredient performs the request and handles the error */
  async LibraryDeleteIngredient(params: { idIngredient: IdIngredient }) {
    const fullUrl = this.baseURL + "/api/library/all-ingredients";
    this.startRequest();
    try {
      const rep: AxiosResponse<DeleteIngredientOut> = await Axios.delete(
        fullUrl,
        {
          headers: this.getHeaders(),
          params: { idIngredient: String(params["idIngredient"]) },
        },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryImportReceipes1 performs the request and handles the error */
  async LibraryImportReceipes1(file: File) {
    const fullUrl = this.baseURL + "/api/library/receipes/import";
    this.startRequest();
    try {
      const formData = new FormData();
      formData.append("file", file, file.name);
      const rep: AxiosResponse<ImportReceipes1Out> = await Axios.post(
        fullUrl,
        formData,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryImportReceipes2 performs the request and handles the error */
  async LibraryImportReceipes2(params: ImportReceipes1Out) {
    const fullUrl = this.baseURL + "/api/library/receipes/import";
    this.startRequest();
    try {
      const rep: AxiosResponse<ReceipeExt[] | null> = await Axios.put(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryLoadMenu performs the request and handles the error */
  async LibraryLoadMenu(params: { idMenu: IdMenu }) {
    const fullUrl = this.baseURL + "/api/library/menus";
    this.startRequest();
    try {
      const rep: AxiosResponse<MenuExt> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { idMenu: String(params["idMenu"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryCreateMenu performs the request and handles the error */
  async LibraryCreateMenu() {
    const fullUrl = this.baseURL + "/api/library/menus";
    this.startRequest();
    try {
      const rep: AxiosResponse<ResourceHeader> = await Axios.put(
        fullUrl,
        null,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryUpdateMenu performs the request and handles the error */
  async LibraryUpdateMenu(params: Menu) {
    const fullUrl = this.baseURL + "/api/library/menus";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryDeleteMenu performs the request and handles the error */
  async LibraryDeleteMenu(params: { idMenu: IdMenu }) {
    const fullUrl = this.baseURL + "/api/library/menus";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { idMenu: String(params["idMenu"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryLoadReceipe performs the request and handles the error */
  async LibraryLoadReceipe(params: { idReceipe: IdReceipe }) {
    const fullUrl = this.baseURL + "/api/library/receipes";
    this.startRequest();
    try {
      const rep: AxiosResponse<ReceipeExt> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { idReceipe: String(params["idReceipe"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryCreateReceipe performs the request and handles the error */
  async LibraryCreateReceipe() {
    const fullUrl = this.baseURL + "/api/library/receipes";
    this.startRequest();
    try {
      const rep: AxiosResponse<ReceipeHeader> = await Axios.put(fullUrl, null, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryUpdateReceipe performs the request and handles the error */
  async LibraryUpdateReceipe(params: Receipe) {
    const fullUrl = this.baseURL + "/api/library/receipes";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryDeleteReceipe performs the request and handles the error */
  async LibraryDeleteReceipe(params: { idReceipe: IdReceipe }) {
    const fullUrl = this.baseURL + "/api/library/receipes";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { idReceipe: String(params["idReceipe"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryAddReceipeIngredient performs the request and handles the error */
  async LibraryAddReceipeIngredient(params: AddReceipeIngredientIn) {
    const fullUrl = this.baseURL + "/api/library/receipes/ingredients";
    this.startRequest();
    try {
      const rep: AxiosResponse<ReceipeIngredientExt> = await Axios.put(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryUpdateReceipeIngredient performs the request and handles the error */
  async LibraryUpdateReceipeIngredient(params: ReceipeIngredient) {
    const fullUrl = this.baseURL + "/api/library/receipes/ingredients";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryDeleteReceipeIngredient performs the request and handles the error */
  async LibraryDeleteReceipeIngredient(params: {
    idReceipe: IdReceipe;
    idIngredient: IdIngredient;
  }) {
    const fullUrl = this.baseURL + "/api/library/receipes/ingredients";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: {
          idReceipe: String(params["idReceipe"]),
          idIngredient: String(params["idIngredient"]),
        },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryAddMenuIngredient performs the request and handles the error */
  async LibraryAddMenuIngredient(params: AddMenuIngredientIn) {
    const fullUrl = this.baseURL + "/api/library/menus/ingredients";
    this.startRequest();
    try {
      const rep: AxiosResponse<MenuIngredientExt> = await Axios.put(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryUpdateMenuIngredient performs the request and handles the error */
  async LibraryUpdateMenuIngredient(params: MenuIngredient) {
    const fullUrl = this.baseURL + "/api/library/menus/ingredients";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryDeleteMenuIngredient performs the request and handles the error */
  async LibraryDeleteMenuIngredient(params: {
    idMenu: IdMenu;
    idIngredient: IdIngredient;
  }) {
    const fullUrl = this.baseURL + "/api/library/menus/ingredients";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: {
          idMenu: String(params["idMenu"]),
          idIngredient: String(params["idIngredient"]),
        },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryAddMenuReceipe performs the request and handles the error */
  async LibraryAddMenuReceipe(params: AddMenuReceipeIn) {
    const fullUrl = this.baseURL + "/api/library/menus/receipes";
    this.startRequest();
    try {
      const rep: AxiosResponse<Receipe> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LibraryDeleteMenuReceipe performs the request and handles the error */
  async LibraryDeleteMenuReceipe(params: {
    idMenu: IdMenu;
    idReceipe: IdReceipe;
  }) {
    const fullUrl = this.baseURL + "/api/library/menus/receipes";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: {
          idMenu: String(params["idMenu"]),
          idReceipe: String(params["idReceipe"]),
        },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderGetDays performs the request and handles the error */
  async OrderGetDays(params: { idSejour: IdSejour }) {
    const fullUrl = this.baseURL + "/api/order/days";
    this.startRequest();
    try {
      const rep: AxiosResponse<Int[] | null> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { idSejour: String(params["idSejour"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderCompileIngredients performs the request and handles the error */
  async OrderCompileIngredients(params: CompileIngredientsIn) {
    const fullUrl = this.baseURL + "/api/order/ingredients";
    this.startRequest();
    try {
      const rep: AxiosResponse<CompileIngredientsOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderGetProfiles performs the request and handles the error */
  async OrderGetProfiles() {
    const fullUrl = this.baseURL + "/api/order/profiles";
    this.startRequest();
    try {
      const rep: AxiosResponse<ProfileHeader[] | null> = await Axios.get(
        fullUrl,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderCreateProfile performs the request and handles the error */
  async OrderCreateProfile() {
    const fullUrl = this.baseURL + "/api/order/profiles";
    this.startRequest();
    try {
      const rep: AxiosResponse<Profile> = await Axios.put(fullUrl, null, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderUpdateProfile performs the request and handles the error */
  async OrderUpdateProfile(params: Profile) {
    const fullUrl = this.baseURL + "/api/order/profiles";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderDeleteProfile performs the request and handles the error */
  async OrderDeleteProfile(params: { id: IdProfile }) {
    const fullUrl = this.baseURL + "/api/order/profiles";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderLoadProfile performs the request and handles the error */
  async OrderLoadProfile(params: { idProfile: IdProfile }) {
    const fullUrl = this.baseURL + "/api/order/profile/suppliers";
    this.startRequest();
    try {
      const rep: AxiosResponse<ProfileExt> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { idProfile: String(params["idProfile"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderAddSupplier performs the request and handles the error */
  async OrderAddSupplier(params: Supplier) {
    const fullUrl = this.baseURL + "/api/order/profile/suppliers";
    this.startRequest();
    try {
      const rep: AxiosResponse<Supplier> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderUpdateSupplier performs the request and handles the error */
  async OrderUpdateSupplier(params: Supplier) {
    const fullUrl = this.baseURL + "/api/order/profile/suppliers";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderDeleteSupplier performs the request and handles the error */
  async OrderDeleteSupplier(params: { id: IdSupplier }) {
    const fullUrl = this.baseURL + "/api/order/profile/suppliers";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderUpdateProfileMapIng performs the request and handles the error */
  async OrderUpdateProfileMapIng(params: UpdateProfileMapIngIn) {
    const fullUrl = this.baseURL + "/api/order/profile/map-ing";
    this.startRequest();
    try {
      const rep: AxiosResponse<ProfileExt> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderUpdateProfileMapKind performs the request and handles the error */
  async OrderUpdateProfileMapKind(params: UpdateProfileMapKindIn) {
    const fullUrl = this.baseURL + "/api/order/profile/map-kind";
    this.startRequest();
    try {
      const rep: AxiosResponse<ProfileExt> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderTidyMapping performs the request and handles the error */
  async OrderTidyMapping(params: TidyIn) {
    const fullUrl = this.baseURL + "/api/order/profile/tidy";
    this.startRequest();
    try {
      const rep: AxiosResponse<ProfileExt> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderGetDefaultMapping performs the request and handles the error */
  async OrderGetDefaultMapping(params: DefaultMappingIn) {
    const fullUrl = this.baseURL + "/api/order/profile/default-map";
    this.startRequest();
    try {
      const rep: AxiosResponse<IngredientMapping> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderSetDefaultProfile performs the request and handles the error */
  async OrderSetDefaultProfile(params: SetDefaultProfile) {
    const fullUrl = this.baseURL + "/api/order/profile/default";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** OrderExportExcel performs the request and handles the error */
  async OrderExportExcel(params: ExportExcelIn) {
    const fullUrl = this.baseURL + "/api/order/export";
    this.startRequest();
    try {
      const rep: AxiosResponse<Blob> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
        responseType: "arraybuffer",
      });

      const header = rep.headers["content-disposition"];
      const startIndex = header.indexOf("filename=") + 9;
      const endIndex = header.length;
      const filename = decodeURIComponent(
        header.substring(startIndex, endIndex),
      );
      return { blob: rep.data, filename: filename };
    } catch (error) {
      this.handleError(error);
    }
  }
}
