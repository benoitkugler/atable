// Code generated by gomacro/typescript/axios_api.go. DO NOT EDIT

import type { AxiosResponse } from "axios";
import Axios from "axios";

class DateTag {
  private _ = "D" as const;
}

// AAAA-MM-YY date format
export type Date_ = string & DateTag;

// github.com/benoitkugler/atable/controllers/sejours.AddIngredientIn
export interface AddIngredientIn {
  IdMenu: IdMenu;
  IdIngredient: IdIngredient;
}
// github.com/benoitkugler/atable/controllers/sejours.AddReceipeIn
export interface AddReceipeIn {
  IdMenu: IdMenu;
  IdReceipe: IdReceipe;
}
// github.com/benoitkugler/atable/controllers/sejours.AssistantMealsIn
export interface AssistantMealsIn {
  IdSejour: IdSejour;
  DaysNumber: number;
  Excursions: { [key: number]: IdGroup[] | null } | null;
  WithGouter: boolean;
  GroupsForCinquieme: IdGroup[] | null;
  DeleteExisting: boolean;
}
// github.com/benoitkugler/atable/controllers/sejours.IngredientHeader
export interface IngredientHeader {
  Title: string;
  ID: number;
  IsPersonnal: boolean;
  Kind: IngredientKind;
}
// github.com/benoitkugler/atable/controllers/sejours.MealCreateIn
export interface MealCreateIn {
  IdSejour: IdSejour;
  Day: number;
  Horaire: Horaire;
}
// github.com/benoitkugler/atable/controllers/sejours.MealExt
export interface MealExt {
  Meal: Meal;
  Groups: MealGroups;
}
// github.com/benoitkugler/atable/controllers/sejours.MealHeader
export interface MealHeader {
  Meal: Meal;
  Groups: Group[] | null;
  IsMenuEmpty: boolean;
}
// github.com/benoitkugler/atable/controllers/sejours.MealsLoadOut
export interface MealsLoadOut {
  Groups: Groups;
  Menus: { [key: IdMenu]: MenuExt } | null;
  Meals: MealExt[] | null;
}
// github.com/benoitkugler/atable/controllers/sejours.MenuExt
export interface MenuExt {
  Ingredients: MenuIngredientExt[] | null;
  Receipes: ReceipeExt[] | null;
}
// github.com/benoitkugler/atable/controllers/sejours.MenuIngredientExt
export interface MenuIngredientExt {
  IdMenu: IdMenu;
  IdIngredient: IdIngredient;
  Quantity: QuantityR;
  Plat: PlatKind;
  Ingredient: Ingredient;
}
// github.com/benoitkugler/atable/controllers/sejours.MoveGroupIn
export interface MoveGroupIn {
  Group: IdGroup;
  From: IdMeal;
  To: IdMeal;
}
// github.com/benoitkugler/atable/controllers/sejours.ReceipeExt
export interface ReceipeExt {
  Receipe: Receipe;
  Ingredients: ReceipeIngredientExt[] | null;
}
// github.com/benoitkugler/atable/controllers/sejours.ReceipeHeader
export interface ReceipeHeader {
  Title: string;
  ID: number;
  IsPersonnal: boolean;
  Plat: PlatKind;
}
// github.com/benoitkugler/atable/controllers/sejours.ReceipeIngredientExt
export interface ReceipeIngredientExt {
  Id: IdIngredient;
  Name: string;
  Kind: IngredientKind;
  Quantity: QuantityR;
}
// github.com/benoitkugler/atable/controllers/sejours.RemoveItemIn
export interface RemoveItemIn {
  IdMenu: IdMenu;
  ID: number;
  IsReceipe: boolean;
}
// github.com/benoitkugler/atable/controllers/sejours.ResourceHeader
export interface ResourceHeader {
  Title: string;
  ID: number;
  IsPersonnal: boolean;
}
// github.com/benoitkugler/atable/controllers/sejours.ResourceSearchOut
export interface ResourceSearchOut {
  Menus: ResourceHeader[] | null;
  Receipes: ReceipeHeader[] | null;
  Ingredients: IngredientHeader[] | null;
}
// github.com/benoitkugler/atable/controllers/sejours.SejourExt
export interface SejourExt {
  Sejour: Sejour;
  Groups: Group[] | null;
}
// github.com/benoitkugler/atable/controllers/sejours.SetMenuIn
export interface SetMenuIn {
  IdMeal: IdMeal;
  IdMenu: IdMenu;
}
// github.com/benoitkugler/atable/controllers/users.AskInscriptionIn
export interface AskInscriptionIn {
  Mail: string;
  Password: string;
  Pseudo: string;
}
// github.com/benoitkugler/atable/controllers/users.AskInscriptionOut
export interface AskInscriptionOut {
  Error: string;
  IsPasswordError: boolean;
}
// github.com/benoitkugler/atable/controllers/users.LogginIn
export interface LogginIn {
  Mail: string;
  Password: string;
}
// github.com/benoitkugler/atable/controllers/users.LogginOut
export interface LogginOut {
  Error: string;
  Token: string;
  Pseudo: string;
  IsPasswordError: boolean;
}
// github.com/benoitkugler/atable/sql/menus.IdIngredient
export type IdIngredient = number;
// github.com/benoitkugler/atable/sql/menus.IdMenu
export type IdMenu = number;
// github.com/benoitkugler/atable/sql/menus.IdReceipe
export type IdReceipe = number;
// github.com/benoitkugler/atable/sql/menus.Ingredient
export interface Ingredient {
  Id: IdIngredient;
  Name: string;
  Kind: IngredientKind;
}
// github.com/benoitkugler/atable/sql/menus.IngredientKind
export enum IngredientKind {
  I_Empty = 0,
  I_Legumes = 1,
  I_Feculents = 2,
  I_Viandes = 3,
  I_Epicerie = 4,
  I_Laitages = 5,
  I_Boulangerie = 6,
}

export const IngredientKindLabels: { [key in IngredientKind]: string } = {
  [IngredientKind.I_Empty]: "Autre",
  [IngredientKind.I_Legumes]: "Fruits et légumes",
  [IngredientKind.I_Feculents]: "Féculents",
  [IngredientKind.I_Viandes]: "Viandes, poissons",
  [IngredientKind.I_Epicerie]: "Épicerie",
  [IngredientKind.I_Laitages]: "Laitages",
  [IngredientKind.I_Boulangerie]: "Boulangerie",
};

// github.com/benoitkugler/atable/sql/menus.MenuIngredient
export interface MenuIngredient {
  IdMenu: IdMenu;
  IdIngredient: IdIngredient;
  Quantity: QuantityR;
  Plat: PlatKind;
}
// github.com/benoitkugler/atable/sql/menus.PlatKind
export enum PlatKind {
  P_Empty = 0,
  P_Dessert = 1,
  P_PlatPrincipal = 2,
  P_Entree = 3,
}

export const PlatKindLabels: { [key in PlatKind]: string } = {
  [PlatKind.P_Empty]: "Autre",
  [PlatKind.P_Dessert]: "Dessert",
  [PlatKind.P_PlatPrincipal]: "Plat principal",
  [PlatKind.P_Entree]: "Entrée",
};

// github.com/benoitkugler/atable/sql/menus.QuantityR
export interface QuantityR {
  Val: number;
  Unite: Unite;
  For: number;
}
// github.com/benoitkugler/atable/sql/menus.Receipe
export interface Receipe {
  Id: IdReceipe;
  Owner: IdUser;
  Plat: PlatKind;
  Name: string;
  Description: string;
}
// github.com/benoitkugler/atable/sql/menus.Unite
export enum Unite {
  U_Piece = 0,
  U_Kg = 1,
  U_G = 2,
  U_L = 3,
  U_CL = 4,
}

export const UniteLabels: { [key in Unite]: string } = {
  [Unite.U_Piece]: "pièces",
  [Unite.U_Kg]: "kg",
  [Unite.U_G]: "gr",
  [Unite.U_L]: "L",
  [Unite.U_CL]: "cL",
};

// github.com/benoitkugler/atable/sql/sejours.Date
export type Date = Date_;
// github.com/benoitkugler/atable/sql/sejours.Group
export interface Group {
  Id: IdGroup;
  Sejour: IdSejour;
  Name: string;
  Color: string;
  Size: number;
}
// github.com/benoitkugler/atable/sql/sejours.Groups
export type Groups = { [key: IdGroup]: Group } | null;
// github.com/benoitkugler/atable/sql/sejours.Horaire
export enum Horaire {
  PetitDejeuner = 0,
  Midi = 1,
  Gouter = 2,
  Diner = 3,
  Cinquieme = 4,
}

export const HoraireLabels: { [key in Horaire]: string } = {
  [Horaire.PetitDejeuner]: "Petit déjeuner",
  [Horaire.Midi]: "Midi",
  [Horaire.Gouter]: "Goûter",
  [Horaire.Diner]: "Dîner",
  [Horaire.Cinquieme]: "Cinquième",
};

// github.com/benoitkugler/atable/sql/sejours.IdGroup
export type IdGroup = number;
// github.com/benoitkugler/atable/sql/sejours.IdMeal
export type IdMeal = number;
// github.com/benoitkugler/atable/sql/sejours.IdSejour
export type IdSejour = number;
// github.com/benoitkugler/atable/sql/sejours.Meal
export interface Meal {
  Id: IdMeal;
  Sejour: IdSejour;
  Menu: IdMenu;
  Jour: number;
  AdditionalPeople: number;
  Horaire: Horaire;
}
// github.com/benoitkugler/atable/sql/sejours.MealGroup
export interface MealGroup {
  IdMeal: IdMeal;
  IdGroup: IdGroup;
}
// github.com/benoitkugler/atable/sql/sejours.MealGroups
export type MealGroups = MealGroup[] | null;
// github.com/benoitkugler/atable/sql/sejours.Sejour
export interface Sejour {
  Id: IdSejour;
  Owner: IdUser;
  Start: Date;
  Name: string;
}
// github.com/benoitkugler/atable/sql/users.IdUser
export type IdUser = number;

/** AbstractAPI provides auto-generated API calls and should be used 
		as base class for an app controller.
	*/
export abstract class AbstractAPI {
  constructor(
    protected baseUrl: string,
    protected authToken: string,
  ) {}

  abstract handleError(error: any): void;

  abstract startRequest(): void;

  getHeaders() {
    return { Authorization: "Bearer " + this.authToken };
  }

  protected async rawAskInscription(params: AskInscriptionIn) {
    const fullUrl = this.baseUrl + "/api/inscription";
    const rep: AxiosResponse<AskInscriptionOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** AskInscription wraps rawAskInscription and handles the error */
  async AskInscription(params: AskInscriptionIn) {
    this.startRequest();
    try {
      const out = await this.rawAskInscription(params);
      this.onSuccessAskInscription(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessAskInscription(data: AskInscriptionOut): void {}

  protected async rawValidateInscription(params: { data: string }) {
    const fullUrl = this.baseUrl + "inscription";
    await Axios.get(fullUrl, {
      params: { data: params["data"] },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** ValidateInscription wraps rawValidateInscription and handles the error */
  async ValidateInscription(params: { data: string }) {
    this.startRequest();
    try {
      const out = await this.rawValidateInscription(params);
      this.onSuccessValidateInscription();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessValidateInscription(): void {}

  protected async rawLoggin(params: LogginIn) {
    const fullUrl = this.baseUrl + "/api/loggin";
    const rep: AxiosResponse<LogginOut> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** Loggin wraps rawLoggin and handles the error */
  async Loggin(params: LogginIn) {
    this.startRequest();
    try {
      const out = await this.rawLoggin(params);
      this.onSuccessLoggin(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessLoggin(data: LogginOut): void {}

  protected async rawUserResetPassword(params: { mail: string }) {
    const fullUrl = this.baseUrl + "/api/reset";
    await Axios.get(fullUrl, {
      params: { mail: params["mail"] },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** UserResetPassword wraps rawUserResetPassword and handles the error */
  async UserResetPassword(params: { mail: string }) {
    this.startRequest();
    try {
      const out = await this.rawUserResetPassword(params);
      this.onSuccessUserResetPassword();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessUserResetPassword(): void {}

  protected async rawSejoursGet() {
    const fullUrl = this.baseUrl + "/api/sejours";
    const rep: AxiosResponse<SejourExt[] | null> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** SejoursGet wraps rawSejoursGet and handles the error */
  async SejoursGet() {
    this.startRequest();
    try {
      const out = await this.rawSejoursGet();
      this.onSuccessSejoursGet(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursGet(data: SejourExt[] | null): void {}

  protected async rawSejoursCreate() {
    const fullUrl = this.baseUrl + "/api/sejours";
    const rep: AxiosResponse<SejourExt> = await Axios.put(fullUrl, null, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** SejoursCreate wraps rawSejoursCreate and handles the error */
  async SejoursCreate() {
    this.startRequest();
    try {
      const out = await this.rawSejoursCreate();
      this.onSuccessSejoursCreate(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursCreate(data: SejourExt): void {}

  protected async rawSejoursUpdate(params: Sejour) {
    const fullUrl = this.baseUrl + "/api/sejours";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** SejoursUpdate wraps rawSejoursUpdate and handles the error */
  async SejoursUpdate(params: Sejour) {
    this.startRequest();
    try {
      const out = await this.rawSejoursUpdate(params);
      this.onSuccessSejoursUpdate();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursUpdate(): void {}

  protected async rawSejoursDelete(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/sejours";
    await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** SejoursDelete wraps rawSejoursDelete and handles the error */
  async SejoursDelete(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawSejoursDelete(params);
      this.onSuccessSejoursDelete();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursDelete(): void {}

  protected async rawSejoursCreateGroupe(params: { "id-sejour": number }) {
    const fullUrl = this.baseUrl + "/api/sejours/groups";
    const rep: AxiosResponse<Group> = await Axios.put(fullUrl, null, {
      params: { "id-sejour": String(params["id-sejour"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** SejoursCreateGroupe wraps rawSejoursCreateGroupe and handles the error */
  async SejoursCreateGroupe(params: { "id-sejour": number }) {
    this.startRequest();
    try {
      const out = await this.rawSejoursCreateGroupe(params);
      this.onSuccessSejoursCreateGroupe(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursCreateGroupe(data: Group): void {}

  protected async rawSejoursUpdateGroupe(params: Group) {
    const fullUrl = this.baseUrl + "/api/sejours/groups";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** SejoursUpdateGroupe wraps rawSejoursUpdateGroupe and handles the error */
  async SejoursUpdateGroupe(params: Group) {
    this.startRequest();
    try {
      const out = await this.rawSejoursUpdateGroupe(params);
      this.onSuccessSejoursUpdateGroupe();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursUpdateGroupe(): void {}

  protected async rawSejoursDeleteGroupe(params: { "id-group": number }) {
    const fullUrl = this.baseUrl + "/api/sejours/groups";
    await Axios.delete(fullUrl, {
      params: { "id-group": String(params["id-group"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** SejoursDeleteGroupe wraps rawSejoursDeleteGroupe and handles the error */
  async SejoursDeleteGroupe(params: { "id-group": number }) {
    this.startRequest();
    try {
      const out = await this.rawSejoursDeleteGroupe(params);
      this.onSuccessSejoursDeleteGroupe();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessSejoursDeleteGroupe(): void {}

  protected async rawMealsGet(params: { "id-sejour": number }) {
    const fullUrl = this.baseUrl + "/api/meals";
    const rep: AxiosResponse<MealHeader[] | null> = await Axios.get(fullUrl, {
      params: { "id-sejour": String(params["id-sejour"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsGet wraps rawMealsGet and handles the error */
  async MealsGet(params: { "id-sejour": number }) {
    this.startRequest();
    try {
      const out = await this.rawMealsGet(params);
      this.onSuccessMealsGet(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsGet(data: MealHeader[] | null): void {}

  protected async rawMealsWizzard(params: AssistantMealsIn) {
    const fullUrl = this.baseUrl + "/api/meals/wizzard";
    const rep: AxiosResponse<MealHeader[] | null> = await Axios.put(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** MealsWizzard wraps rawMealsWizzard and handles the error */
  async MealsWizzard(params: AssistantMealsIn) {
    this.startRequest();
    try {
      const out = await this.rawMealsWizzard(params);
      this.onSuccessMealsWizzard(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsWizzard(data: MealHeader[] | null): void {}

  protected async rawMealsSearch(params: { search: string }) {
    const fullUrl = this.baseUrl + "/api/meals/search";
    const rep: AxiosResponse<ResourceSearchOut> = await Axios.get(fullUrl, {
      params: { search: params["search"] },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsSearch wraps rawMealsSearch and handles the error */
  async MealsSearch(params: { search: string }) {
    this.startRequest();
    try {
      const out = await this.rawMealsSearch(params);
      this.onSuccessMealsSearch(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsSearch(data: ResourceSearchOut): void {}

  protected async rawMealsLoad(params: { idSejour: number; day: number }) {
    const fullUrl = this.baseUrl + "/api/meals/details";
    const rep: AxiosResponse<MealsLoadOut> = await Axios.get(fullUrl, {
      params: {
        idSejour: String(params["idSejour"]),
        day: String(params["day"]),
      },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsLoad wraps rawMealsLoad and handles the error */
  async MealsLoad(params: { idSejour: number; day: number }) {
    this.startRequest();
    try {
      const out = await this.rawMealsLoad(params);
      this.onSuccessMealsLoad(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsLoad(data: MealsLoadOut): void {}

  protected async rawMealsPreview(params: { idMeal: number }) {
    const fullUrl = this.baseUrl + "/api/meals/details-one";
    const rep: AxiosResponse<MenuExt> = await Axios.get(fullUrl, {
      params: { idMeal: String(params["idMeal"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsPreview wraps rawMealsPreview and handles the error */
  async MealsPreview(params: { idMeal: number }) {
    this.startRequest();
    try {
      const out = await this.rawMealsPreview(params);
      this.onSuccessMealsPreview(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsPreview(data: MenuExt): void {}

  protected async rawMealsCreate(params: MealCreateIn) {
    const fullUrl = this.baseUrl + "/api/meals/details";
    const rep: AxiosResponse<MealExt> = await Axios.put(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsCreate wraps rawMealsCreate and handles the error */
  async MealsCreate(params: MealCreateIn) {
    this.startRequest();
    try {
      const out = await this.rawMealsCreate(params);
      this.onSuccessMealsCreate(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsCreate(data: MealExt): void {}

  protected async rawMealsUpdate(params: Meal) {
    const fullUrl = this.baseUrl + "/api/meals/details";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** MealsUpdate wraps rawMealsUpdate and handles the error */
  async MealsUpdate(params: Meal) {
    this.startRequest();
    try {
      const out = await this.rawMealsUpdate(params);
      this.onSuccessMealsUpdate();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsUpdate(): void {}

  protected async rawMealsDelete(params: { idMeal: number }) {
    const fullUrl = this.baseUrl + "/api/meals/details";
    await Axios.delete(fullUrl, {
      params: { idMeal: String(params["idMeal"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** MealsDelete wraps rawMealsDelete and handles the error */
  async MealsDelete(params: { idMeal: number }) {
    this.startRequest();
    try {
      const out = await this.rawMealsDelete(params);
      this.onSuccessMealsDelete();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsDelete(): void {}

  protected async rawMealsMoveGroup(params: MoveGroupIn) {
    const fullUrl = this.baseUrl + "/api/meals/groups";
    const rep: AxiosResponse<MealGroups[]> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsMoveGroup wraps rawMealsMoveGroup and handles the error */
  async MealsMoveGroup(params: MoveGroupIn) {
    this.startRequest();
    try {
      const out = await this.rawMealsMoveGroup(params);
      this.onSuccessMealsMoveGroup(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsMoveGroup(data: MealGroups[]): void {}

  protected async rawMealsAddIngredient(params: AddIngredientIn) {
    const fullUrl = this.baseUrl + "/api/meals/ingredients";
    const rep: AxiosResponse<MenuExt> = await Axios.put(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsAddIngredient wraps rawMealsAddIngredient and handles the error */
  async MealsAddIngredient(params: AddIngredientIn) {
    this.startRequest();
    try {
      const out = await this.rawMealsAddIngredient(params);
      this.onSuccessMealsAddIngredient(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsAddIngredient(data: MenuExt): void {}

  protected async rawMealsUpdateMenuIngredient(params: MenuIngredient) {
    const fullUrl = this.baseUrl + "/api/meals/ingredients";
    const rep: AxiosResponse<MenuExt> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsUpdateMenuIngredient wraps rawMealsUpdateMenuIngredient and handles the error */
  async MealsUpdateMenuIngredient(params: MenuIngredient) {
    this.startRequest();
    try {
      const out = await this.rawMealsUpdateMenuIngredient(params);
      this.onSuccessMealsUpdateMenuIngredient(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsUpdateMenuIngredient(data: MenuExt): void {}

  protected async rawMealsAddReceipe(params: AddReceipeIn) {
    const fullUrl = this.baseUrl + "/api/meals/receipes";
    const rep: AxiosResponse<MenuExt> = await Axios.put(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsAddReceipe wraps rawMealsAddReceipe and handles the error */
  async MealsAddReceipe(params: AddReceipeIn) {
    this.startRequest();
    try {
      const out = await this.rawMealsAddReceipe(params);
      this.onSuccessMealsAddReceipe(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsAddReceipe(data: MenuExt): void {}

  protected async rawMealsRemoveItem(params: RemoveItemIn) {
    const fullUrl = this.baseUrl + "/api/meals/remove";
    const rep: AxiosResponse<MenuExt> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsRemoveItem wraps rawMealsRemoveItem and handles the error */
  async MealsRemoveItem(params: RemoveItemIn) {
    this.startRequest();
    try {
      const out = await this.rawMealsRemoveItem(params);
      this.onSuccessMealsRemoveItem(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsRemoveItem(data: MenuExt): void {}

  protected async rawMealsSetMenu(params: SetMenuIn) {
    const fullUrl = this.baseUrl + "/api/meals/menus";
    const rep: AxiosResponse<MenuExt> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** MealsSetMenu wraps rawMealsSetMenu and handles the error */
  async MealsSetMenu(params: SetMenuIn) {
    this.startRequest();
    try {
      const out = await this.rawMealsSetMenu(params);
      this.onSuccessMealsSetMenu(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessMealsSetMenu(data: MenuExt): void {}
}
